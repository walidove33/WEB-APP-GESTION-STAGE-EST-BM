import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { Observable, throwError } from 'rxjs';
import { catchError, tap, switchMap } from 'rxjs/operators';
import { NotificationService } from './notification.service';
import { 
  PlanificationSoutenanceResponse, 
  DetailSoutenance, 
  SoutenanceEtudiantSlotDto,
  RapportDetails 
} from '../models/stage.model';

@Injectable({
  providedIn: 'root'
})
export class PlanificationService {
  private baseUrl = 'http://localhost:8081/stages/planification';

  constructor(
    private http: HttpClient,
    private notificationService: NotificationService
  ) {}

  // Admin: Get all planifications
  getAll(): Observable<PlanificationSoutenanceResponse[]> {
    const loadingId = this.notificationService.loading(
      'Chargement des planifications...',
      'R√©cup√©ration de toutes les planifications'
    );

    return this.http.get<PlanificationSoutenanceResponse[]>(this.baseUrl).pipe(
      tap((planifications) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Planifications',
          `${planifications.length} planification(s) charg√©e(s)`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Planifications',
          'Impossible de charger les planifications'
        );
        return this.handleError(error);
      })
    );
  }

  // Encadrant: Get planifications by supervisor
  getByEncadrant(encadrantId: number): Observable<PlanificationSoutenanceResponse[]> {
    const loadingId = this.notificationService.loading(
      'Chargement de vos planifications...',
      'R√©cup√©ration des planifications assign√©es'
    );

    return this.http.get<PlanificationSoutenanceResponse[]>(`${this.baseUrl}/encadrant/${encadrantId}`).pipe(
      tap((planifications) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Mes planifications',
          `${planifications.length} planification(s) trouv√©e(s)`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Mes planifications',
          'Impossible de charger vos planifications'
        );
        return this.handleError(error);
      })
    );
  }

  // √âtudiant: Get student's soutenance slots
  getByEtudiant(etudiantId: number): Observable<SoutenanceEtudiantSlotDto[]> {
    const loadingId = this.notificationService.loading(
      'Chargement de vos cr√©neaux...',
      'R√©cup√©ration de vos soutenances programm√©es'
    );

    return this.http.get<SoutenanceEtudiantSlotDto[]>(`${this.baseUrl}/etudiant/${etudiantId}`).pipe(
      tap((soutenances) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Mes soutenances',
          `${soutenances.length} cr√©neau(x) programm√©(s)`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Mes soutenances',
          'Impossible de charger vos cr√©neaux'
        );
        return this.handleError(error);
      })
    );
  }

  // Add detail to planification
  addDetail(planifId: number, detail: DetailSoutenance): Observable<DetailSoutenance> {
    const loadingId = this.notificationService.loading(
      'Ajout du cr√©neau...',
      'Enregistrement du nouveau cr√©neau de soutenance'
    );

    return this.http.post<DetailSoutenance>(`${this.baseUrl}/${planifId}/addDetail`, detail).pipe(
      tap((newDetail) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Cr√©neau ajout√©',
          `Nouveau cr√©neau cr√©√©: ${newDetail.heureDebut} - ${newDetail.heureFin}`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Ajout cr√©neau',
          'Impossible d\'ajouter le cr√©neau'
        );
        return this.handleError(error);
      })
    );
  }

  // Get planification details
  getDetails(planifId: number): Observable<DetailSoutenance[]> {
    const loadingId = this.notificationService.loading(
      'Chargement des cr√©neaux...',
      'R√©cup√©ration des d√©tails de planification'
    );

    return this.http.get<DetailSoutenance[]>(`${this.baseUrl}/${planifId}/details`).pipe(
      tap((details) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Cr√©neaux',
          `${details.length} cr√©neau(x) trouv√©(s)`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Cr√©neaux',
          'Impossible de charger les cr√©neaux'
        );
        return this.handleError(error);
      })
    );
  }

  // Update detail
  updateDetail(detailId: number, detail: DetailSoutenance): Observable<DetailSoutenance> {
    const loadingId = this.notificationService.loading(
      'Mise √† jour du cr√©neau...',
      'Sauvegarde des modifications'
    );

    return this.http.put<DetailSoutenance>(`${this.baseUrl}/details/${detailId}`, detail).pipe(
      tap((updatedDetail) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Cr√©neau mis √† jour',
          `Cr√©neau modifi√©: ${updatedDetail.heureDebut} - ${updatedDetail.heureFin}`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Mise √† jour',
          'Impossible de mettre √† jour le cr√©neau'
        );
        return this.handleError(error);
      })
    );
  }

  // Create new planification (Admin only)
  create(planification: any): Observable<PlanificationSoutenanceResponse> {
    const loadingId = this.notificationService.loading(
      'Cr√©ation de la planification...',
      'Enregistrement de la nouvelle planification'
    );

    return this.http.post<PlanificationSoutenanceResponse>(this.baseUrl, planification).pipe(
      tap((newPlanification) => {
        this.notificationService.operationSuccess(
          loadingId,
          'Planification cr√©√©e',
          `Planification du ${newPlanification.dateSoutenance} cr√©√©e avec succ√®s`
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Cr√©ation planification',
          'Impossible de cr√©er la planification'
        );
        return this.handleError(error);
      })
    );
  }

  // Delete planification (Admin only)
  delete(planifId: number): Observable<void> {
    const loadingId = this.notificationService.loading(
      'Suppression de la planification...',
      'Retrait de la planification du syst√®me'
    );

    return this.http.delete<void>(`${this.baseUrl}/${planifId}`).pipe(
      tap(() => {
        this.notificationService.operationSuccess(
          loadingId,
          'Planification supprim√©e',
          'La planification a √©t√© supprim√©e avec succ√®s'
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Suppression',
          'Impossible de supprimer la planification'
        );
        return this.handleError(error);
      })
    );
  }

  // Delete detail
  deleteDetail(detailId: number): Observable<void> {
    const loadingId = this.notificationService.loading(
      'Suppression du cr√©neau...',
      'Retrait du cr√©neau de soutenance'
    );

    return this.http.delete<void>(`${this.baseUrl}/details/${detailId}`).pipe(
      tap(() => {
        this.notificationService.operationSuccess(
          loadingId,
          'Cr√©neau supprim√©',
          'Le cr√©neau a √©t√© supprim√© avec succ√®s'
        );
      }),
      catchError((error) => {
        this.notificationService.operationError(
          loadingId,
          'Suppression cr√©neau',
          'Impossible de supprimer le cr√©neau'
        );
        return this.handleError(error);
      })
    );
  }

  private handleError(error: any): Observable<never> {
    console.error('üö® PlanificationService error:', error);
    
    let errorMessage = 'Une erreur est survenue';
    
    if (error.status === 401) {
      errorMessage = 'Session expir√©e. Veuillez vous reconnecter.';
    } else if (error.status === 403) {
      errorMessage = 'Acc√®s refus√©.';
    } else if (error.status === 404) {
      errorMessage = 'Planification non trouv√©e.';
    } else if (error.status === 409) {
      errorMessage = 'Conflit: cr√©neau d√©j√† occup√©.';
    } else if (error.status === 0) {
      errorMessage = 'Impossible de se connecter au serveur.';
    } else if (error.error?.message) {
      errorMessage = error.error.message;
    }

    return throwError(() => new Error(errorMessage));
  }
}